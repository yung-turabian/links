typename Format = [|FInt:Format | FString:Format | FOther:(Char,Format) | FEnd |];

sig format : ([Char]) ~> Format
fun format(fmt) {
    switch(fmt) {
        case [] -> FEnd
        case '%'::'d'::cs -> FInt (format(cs))
        case '%'::'s'::cs -> FString (format(cs))
        case c::cs -> FOther (c, (format(cs)))
    }
}

sig formatString : (String) ~> Format
fun formatString(str) {
    format(explode(str))
}

# Find someway: https://www.reddit.com/r/programming/comments/23xgqa/idris_type_safe_printf/
mutual {
    typename InterpFormatIn (e::Eff) = (Int) -e-> InterpFormat(e);
    typename InterpFormat(e::Eff) = [||];
}


#sig printf : (String) ~> interpFormat (formatString s)
#fun print(fmt)
